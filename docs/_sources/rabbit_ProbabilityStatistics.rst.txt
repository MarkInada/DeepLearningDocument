
確率・統計
==========

目標：確率の基礎を理解し、統計分布を行う
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

◼︎頻度確率 (客観確率)
~~~~~~~~~~~~~~~~~~~~~

・発生する頻度（１００本のうち１本が当たる確率は1%）

実験などの検証で客観的にわかる事実

◼︎ベイズ確率 (主観確率)
~~~~~~~~~~~~~~~~~~~~~~~

・信念の度合い（１０％の確率で脳梗塞という診断）

自分の思っている思いの強さ

◼︎同時確率
~~~~~~~~~~

お互いに因果関係のない事象X = xと事象Y = yが同時におこる確率

.. math::  P(X = x, Y = y) 

はこれらの積で表されれる

.. math::  P(X = x)P(Y = y) 

例） 2回に1回おこる事象Xと3回に1回おこる事象Yは 1/2 \* 1/3 で 1/6となる

◼︎条件付き確率
~~~~~~~~~~~~~~

事象Xの条件の時に事象Yになる確率

.. math::  P(Y = y|X = x) = \frac{P(Y=y, X=x)}{P(X = x)}

例)
事象X・・・雨が降る確率1/2、事象Y・・・雨が降ると事故がおこる確率1/3。この時、雨が降っている条件で事故がおこる確率は、

1/3(事象Y) \* 1/2(事象X) で 1/6(P(x,y)) を
雨の確率1/2(事象X)で割った1/3が正解となる。

◼︎ベイズ則
~~~~~~~~~~

ある町の子供たちは毎日1/4の確率で飴をもらう

飴をもらうと1/2の確率で笑顔になる

そもそも笑顔な子供は1/3の確率

笑顔な子供が飴を持っている確率は？

.. math::  P(飴) = \frac{1}{4} 

.. math::  P(笑顔|飴) = \frac{1}{2} 

.. math::  P(笑顔) = \frac{1}{3} 

.. math::  P(笑顔, 飴) = P(飴, 笑顔) = P(笑顔|飴)P(飴) = \frac{1}{8} 

求めるべき確率は、 笑顔な条件下で飴を持っている確率なので、

.. math::  P(飴|笑顔) 

前提：条件付き確率に条件後の事象確率をかけると順序に関わらず同時確率だけ残るので結果は同じとなる

.. math::  P(x|y)P(y) = P(y|x)P(x) 

この公式をつかって以下のように解く

.. math::  P(飴|笑顔)P(笑顔) = P(飴, 笑顔) 

.. math::  P(飴|笑顔)× \frac{1}{3} = \frac{1}{8} 

.. math::  P(飴|笑顔) = \frac{3}{8} 

つまり、ベイズの定理は以下の通り。

.. math::  P(B|A) = \frac{P(A|B)P(B)}{P(A)} 

◼︎確率変数
~~~~~~~~~~

事象そのものを指す数値

例）裏を０表を１とする場合、表が４枚裏が０枚の時、確率変数は”４”

◼︎確率分布
~~~~~~~~~~

事象の発生する確率の分布図　（離散的であれば表）

例）表が４枚裏が０枚でた確率が1/16, 表が3枚裏が1枚でた確率が4/16
...という風に事象によって確率は異なる。これらの確率をグラフや表に表したものが確率分布。

◼︎期待値
~~~~~~~~

その確率分布における確率変数のありえそうな値（平均値）

.. math::  期待値E(f) = \sum_{k=1}^{n} P(X=x_k)f(X=x_k) 

.. math::  P(x) = 確率 

.. math::  f(x) = 確率変数 

この期待値E(f)は平均値と一致するので、

.. math::  期待値E(f) = 平均値 = \frac{\sum_{k=1}^{n}f(X=x_k)}{n} 

◼︎分散（離散）
~~~~~~~~~~~~~~

・データのちらばり具合

例）年間毎日平均3km歩く、かつ分散が０の場合、365日毎日ぴったり3km歩いていることなる

・データの各々の値が期待値（平均）からどれだけずれているのか平均したもの

.. math::  分散Var(f) =  \frac{1}{n}\sum_{k=1}^{n} (f_{(X=x_k)}-E_{(f)})^2 

.. math::  E(f) = 期待値 

.. math::  f(x) = 確率変数 

※この二乗は絶対値だと計算するときに正か負の判定がいるため、計算を早くするための二乗

分散の計算は、「確率変数のとり得る値と期待値（平均値）の差の2乗」と「確率」との積を、全て足し合わせたものとなる、

例）サイコロの分散は

+----------------+-------+-------+-------+-------+-------+-------+
| サイコロの目   | 1     | 2     | 3     | 4     | 5     | 6     |
+================+=======+=======+=======+=======+=======+=======+
| 確率変数       | 1     | 2     | 3     | 4     | 5     | 6     |
+----------------+-------+-------+-------+-------+-------+-------+
| 確率           | 1/6   | 1/6   | 1/6   | 1/6   | 1/6   | 1/6   |
+----------------+-------+-------+-------+-------+-------+-------+

.. math::  分散Var(f) = \frac{1}{n}\sum_{k=1}^{n} (f_{(X=x_k)}-E_{(f)})^2 

.. math::  = \frac{1}{6}\sum_{k=1}^{n} (f_{(X=x_k)}-3.5)^2 

.. math::  = \frac{(1-3.5)^2}{6} + \frac{(2-3.5)^2}{6} + \frac{(3-3.5)^2}{6} + \frac{(4-3.5)^2}{6} + \frac{(5-3.5)^2}{6} + \frac{(6-3.5)^2}{6} 

.. math::  = \frac{35}{12} 

.. raw:: html

   <!-- 上記、期待値の式に当てはめると、

   $$ 期待値E(f) = \frac{\sum_{k=1}^{n}((f_{(x_k)}-E_{(f)})^2)}{n} $$

   これは”確率変数の二乗の平均 - 平均の二乗”で求められるので、

   $$ 分散Var(f) = E(f^2_{(X=x)})-(E_{(f)})^2 $$ -->

◼︎標準偏差
~~~~~~~~~~

・標準偏差とは分散の単位の次元を実際のデータと同じにしたもの。分散は計算式で二乗しているため、実際のデータのばらつきがわからない。分散の平方根をとることで求められる。

.. math::  標準偏差 σ(f) = \sqrt{\frac{1}{n}\sum_{k=1}^{n} (f_{(X=x_k)}-E_{(f)})^2} 

◼︎実際に分散と標準偏差を求めてみよう
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

以下の通り、分散と標準偏差が求められる。サイコロを振った目の数の平均は3.5となる。標準偏差はおよそ1.71なので、おおよそ振った目は1.79から5.21の間におさまることがわかる。

.. code:: ipython3

    import numpy as np
    import math
    
    stochasticVariable = np.array([1, 2, 3, 4, 5, 6])
    probability = np.array([1/6, 1/6, 1/6, 1/6, 1/6, 1/6])
    average = stochasticVariable.mean()
    
    var = 0
    
    for i in range(6):
        var += probability[i]*((stochasticVariable[i]-average)**2)
    
    print ("サイコロの平均: ", average)
    print ("サイコロの分散: ", var)
    print ("サイコロの標準偏差: ", math.sqrt(var))


.. parsed-literal::

    サイコロの平均:  3.5
    サイコロの分散:  2.9166666666666665
    サイコロの標準偏差:  1.707825127659933


◼︎共分散
~~~~~~~~

・２つのデータ系列の傾向の違い

正の値をとれば似た傾向。負の値をとれば逆の傾向。ゼロを取れば関連性に乏しい。

例）　年収と名前の画数の共分散は0に近い。年収と年齢の共分散は正の値。年収と休暇の数の共分散は負の値。

.. math::  共分散Cov(f, g) = \frac{1}{n}\sum_{k=1}^{n}((f_{(X=x_k)}-E_{(f)})(g_{(Y=y_k)}-E_{(g)})) 

同じサイコロ二つの共分散の値は分散と同じ結果になる。

.. math::  共分散Cov(f, g) = \frac{1}{n}\sum_{k=1}^{n}((f_{(X=x_k)}-E_{(f)})(g_{(Y=y_k)}-E_{(g)})) 

.. math::  = \frac{1}{6}\sum_{k=1}^{n} ((f_{(X=x_k)}-3.5)(g_{(Y=y_k)}-3.5)) 

.. math::  = \frac{(1-3.5)^2}{6} + \frac{(2-3.5)^2}{6} + \frac{(3-3.5)^2}{6} + \frac{(4-3.5)^2}{6} + \frac{(5-3.5)^2}{6} + \frac{(6-3.5)^2}{6} 

.. math::  = \frac{35}{12} 

◼︎相関係数
~~~~~~~~~~

共分散は各変数の大きさや単位に依存する。共分散"1"は、それがキロメートルなのかメートルなのかで意味が全く変わってくるので、複数の変数の関係性を比較しずらい。\ **相関係数**\ は、大きさや単位に依存せず、変数間の関係を数値化できる。共分散をそれぞれの変数の標準偏差で割ることで求まる。

.. math::  相関係数Corr(f, g) = \frac{\frac{1}{n}\sum_{k=1}^{n}((f_{(X=x_k)}-E_{(f)})(g_{(Y=y_k)}-E_{(g)}))}{\sqrt{\frac{1}{n}\sum_{k=1}^{n} (f_{(X=x_k)}-E_{(f)})^2}\sqrt{\frac{1}{n}\sum_{k=1}^{n} (f_{(Y=y_k)}-E_{(g)})^2}} 

相関係数は、-1から1までの値を取り、1に近ければ近いほど正の相関があるといい、-1に近ければ近いほど負の相関があるという。0に近い場合は、無相関である。全く同じ変数同士だと相関１になる。

◼︎共分散と相関係数を使って統計分析してみよう
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

乳がんのデータセットを読み込み、共分散と相関係数を求めてみる。細胞核の面積と半径には深い関係性があることがわかるが、面積と滑らかさはほとんど関係ないことがわかる、

.. code:: ipython3

    import numpy as np
    from sklearn.datasets import load_breast_cancer
    import pandas as pd
    
    cancer = load_breast_cancer()
    
    cancerdata = pd.DataFrame(cancer.data, columns=cancer.feature_names)
    
    radius_area_cov = np.cov(cancerdata['mean area'], cancerdata['mean radius'])
    radius_area_corr = np.corrcoef(cancerdata['mean area'], cancerdata['mean radius'])
    
    area_smooth_cov = np.cov(cancerdata['mean area'], cancerdata['mean smoothness'])
    area_smooth_corr = np.corrcoef(cancerdata['mean area'], cancerdata['mean smoothness'])
    
    print("細胞核の面積と半径の共分散:\n", radius_area_cov)
    print("細胞核の面積と半径の相関係数:\n", radius_area_corr)
    print("細胞核の面積と滑らかさの共分散:\n", area_smooth_cov)
    print("細胞核の面積と滑らかさの相関係数:\n", area_smooth_corr)


.. parsed-literal::

    細胞核の面積と半径の共分散:
     [[1.23843554e+05 1.22448341e+03]
     [1.22448341e+03 1.24189201e+01]]
    細胞核の面積と半径の相関係数:
     [[1.         0.98735717]
     [0.98735717 1.        ]]
    細胞核の面積と滑らかさの共分散:
     [[1.23843554e+05 8.76178126e-01]
     [8.76178126e-01 1.97799700e-04]]
    細胞核の面積と滑らかさの相関係数:
     [[1.         0.17702838]
     [0.17702838 1.        ]]


◼︎ベルヌーイ分布
~~~~~~~~~~~~~~~~

・コイントスのイメージ（二種類のみの結果しか得られない試行の結果を０と１で表した分布）

・1である確率がpであるとき0である確率は1-p

・事象Xとそのほかの事象というようになんでもベルヌーイ分布で表せる。現象はなんでも二つに分けられるので何にでも使える。

.. math::  P(X = 0) = 1-μ 

.. math::  P(X = 1) = μ 

とすると、事象Xは0か１なので、

.. math::  P(X = x) = μ^x(1-μ)^{1-x} 

.. math::  P(x|μ) = μ^x(1-μ)^{1-x} 

と表せる

◼︎マルチヌーイ分布（カテゴリカル分布）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

・サイコロを転がすイメージ。（複数の結果が得られる試行の結果、たくさんの結果を持つ分布）

・ベルヌーイの複数バーションのため、"マルチ"ヌーイ。カテゴリカル分布という名前の方が有名。

・各面の確率が異なるイカサマサイコロでも使える。

.. math::  P(X = 1) = λ_1 

.. math::  P(X = 2) = λ_2 

.. math::  P(X = 3) = λ_3 

.. math::  P(X = 4) = λ_4 

.. math::  ... 

.. math::  λ_1 + λ_2 + λ_3 + λ_4 ... = 1 

.. math::  P(X = x) = λ_1^{[x=1]}λ_2^{[x=2]}λ_3^{[x=3]} ... 

最後の式はxが1だった場合にλ1にする、という条件入りの意味のため、上記のP(X=?)=λ?となる表と同じ意味となる。

◼︎二項分布
~~~~~~~~~~

・ベルヌーイ分布の多試行版

・1番目に表がでて2番目に裏がでるなどの順番は関係なく、組み合わせにより、その回数分だけ表や裏がでる確率は増えるので、ベルヌーイの式にコンビネーションで組み合わせ数を掛け合わせた式になる　（n回投げるうち、x回だけ表が出るのはどういう確率は、というのが二項分布）

.. math::  P(x|λ, n) = _n C _x λ^x(1-λ)^{n-x} 

.. math::  P(x|λ, n) = \frac{n!}{x!(n-x)!} λ^x(1-λ)^{n-x} 

◼︎正規分布（ガウス分布）
~~~~~~~~~~~~~~~~~~~~~~~~

・釣鐘型（ベル型）の連続分布

.. math::  N(x;μ,σ^2)= \sqrt{\frac{1}{2πσ^2}}exp(-\frac{1}{2σ^2}(x-μ)^2)  

N ・・・　確率密度関数

μ ・・・　平均

σ ・・・　分散

補足：exp ...
2.71828182846　ネイピア数（自然対数の底）　微分しても形が変わらない。

.. math::  e^x = (e^x)' 

2πσ二乗と2σ二乗は積分値が１となるように補正するための定数。

◼︎正規分布のイメージ
~~~~~~~~~~~~~~~~~~~~

ネイビア数を使って釣鐘型の形を実現しようとするとき、

x=負の数の場合

.. math::  y=e^x 

x=正の数の場合

.. math::  y=e^{-x} 

とすれば以下のように実現できる。 これは絶対値を取ることで実現できる。

.. math::  y=e^{-|x|} 

　

.. code:: ipython3

    import matplotlib.pyplot as plt
    import numpy as np
    import math
    
    x = np.arange(-10, 0, 0.01)
    y = math.e**x
    
    plt.plot(x, y)
    
    x = np.arange(0, 10, 0.01)
    y = math.e**-x
    
    plt.plot(x, y)
    
    plt.show()



.. image:: rabbit_ProbabilityStatistics_files/rabbit_ProbabilityStatistics_5_0.png


絶対値をとると、上記のように条件によって計算を切り替えなければならない。

.. math::  e^{-x^2} 

とすることで釣鐘型を絶対値による条件分岐なしで実現する　（二乗なので滑らかな曲線となる）

.. code:: ipython3

    x = np.arange(-3, 3, 0.01)
    y = math.e**-(x**2)
    
    plt.plot(x, y)
    plt.show()



.. image:: rabbit_ProbabilityStatistics_files/rabbit_ProbabilityStatistics_7_0.png


◼︎補足
~~~~~~

確率密度関数
^^^^^^^^^^^^

連続型確率変数 X に対して，X が a 以上 b 以下となる確率が，積分を用いて

.. math::  P(a≤X≤b) = \int _a ^b f(x) dx 

で与えられるとき，f(x) を確率密度関数という。

◼︎引用, 参考資料
~~~~~~~~~~~~~~~~

・ラビットチャレンジ - 応用数学講座

http://ai999.careers/rabbit/

・東京大学グローバル消費インテリジェンス寄付講座 - Data Science Online
Course

https://gci.t.u-tokyo.ac.jp/

・統計WEB - 確率変数の分散

https://bellcurve.jp/statistics/course/6716.html

・高校数学の美しい物語 - 確率密度関数の意味と具体例

https://mathtrain.jp/pmitsudo
